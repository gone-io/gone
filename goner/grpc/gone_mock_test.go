// Code generated by MockGen. DO NOT EDIT.
// Source: ../../interface_for_goner.go
//
// Generated by this command:
//
//	mockgen -package=gone_grpc -source=../../interface_for_goner.go -mock_names=Server=CmuxServer
//

// Package gone_grpc is a generated GoMock package.
package gone_grpc

import (
	context "context"
	sql "database/sql"
	goneMock "github.com/gone-io/gone"
	net "net"
	reflect "reflect"
	time "time"

	cmux "github.com/soheilhy/cmux"
	gomock "go.uber.org/mock/gomock"
	xorm "xorm.io/xorm"
	caches "xorm.io/xorm/caches"
	contexts "xorm.io/xorm/contexts"
	dialects "xorm.io/xorm/dialects"
	log "xorm.io/xorm/log"
	names "xorm.io/xorm/names"
	schemas "xorm.io/xorm/schemas"
)

// MockCMuxServer is a mock of CMuxServer interface.
type MockCMuxServer struct {
	goneMock.Flag
	ctrl     *gomock.Controller
	recorder *MockCMuxServerMockRecorder
	isgomock struct{}
}

// MockCMuxServerMockRecorder is the mock recorder for MockCMuxServer.
type MockCMuxServerMockRecorder struct {
	mock *MockCMuxServer
}

// NewMockCMuxServer creates a new mock instance.
func NewMockCMuxServer(ctrl *gomock.Controller) *MockCMuxServer {
	mock := &MockCMuxServer{ctrl: ctrl}
	mock.recorder = &MockCMuxServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCMuxServer) EXPECT() *MockCMuxServerMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockCMuxServer) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockCMuxServerMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockCMuxServer)(nil).GetAddress))
}

// Match mocks base method.
func (m *MockCMuxServer) Match(matcher ...cmux.Matcher) net.Listener {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range matcher {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Match", varargs...)
	ret0, _ := ret[0].(net.Listener)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockCMuxServerMockRecorder) Match(matcher ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockCMuxServer)(nil).Match), matcher...)
}

// MatchWithWriters mocks base method.
func (m *MockCMuxServer) MatchWithWriters(matcher ...cmux.MatchWriter) net.Listener {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range matcher {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MatchWithWriters", varargs...)
	ret0, _ := ret[0].(net.Listener)
	return ret0
}

// MatchWithWriters indicates an expected call of MatchWithWriters.
func (mr *MockCMuxServerMockRecorder) MatchWithWriters(matcher ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchWithWriters", reflect.TypeOf((*MockCMuxServer)(nil).MatchWithWriters), matcher...)
}

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	goneMock.Flag
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
	isgomock struct{}
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// GetTraceId mocks base method.
func (m *MockTracer) GetTraceId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceId indicates an expected call of GetTraceId.
func (mr *MockTracerMockRecorder) GetTraceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceId", reflect.TypeOf((*MockTracer)(nil).GetTraceId))
}

// Go mocks base method.
func (m *MockTracer) Go(fn func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Go", fn)
}

// Go indicates an expected call of Go.
func (mr *MockTracerMockRecorder) Go(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Go", reflect.TypeOf((*MockTracer)(nil).Go), fn)
}

// Recover mocks base method.
func (m *MockTracer) Recover() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recover")
}

// Recover indicates an expected call of Recover.
func (mr *MockTracerMockRecorder) Recover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockTracer)(nil).Recover))
}

// RecoverSetTraceId mocks base method.
func (m *MockTracer) RecoverSetTraceId(traceId string, fn func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecoverSetTraceId", traceId, fn)
}

// RecoverSetTraceId indicates an expected call of RecoverSetTraceId.
func (mr *MockTracerMockRecorder) RecoverSetTraceId(traceId, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverSetTraceId", reflect.TypeOf((*MockTracer)(nil).RecoverSetTraceId), traceId, fn)
}

// SetTraceId mocks base method.
func (m *MockTracer) SetTraceId(traceId string, fn func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTraceId", traceId, fn)
}

// SetTraceId indicates an expected call of SetTraceId.
func (mr *MockTracerMockRecorder) SetTraceId(traceId, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTraceId", reflect.TypeOf((*MockTracer)(nil).SetTraceId), traceId, fn)
}

// MockXormEngine is a mock of XormEngine interface.
type MockXormEngine struct {
	goneMock.Flag
	ctrl     *gomock.Controller
	recorder *MockXormEngineMockRecorder
	isgomock struct{}
}

// MockXormEngineMockRecorder is the mock recorder for MockXormEngine.
type MockXormEngineMockRecorder struct {
	mock *MockXormEngine
}

// NewMockXormEngine creates a new mock instance.
func NewMockXormEngine(ctrl *gomock.Controller) *MockXormEngine {
	mock := &MockXormEngine{ctrl: ctrl}
	mock.recorder = &MockXormEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXormEngine) EXPECT() *MockXormEngineMockRecorder {
	return m.recorder
}

// AddHook mocks base method.
func (m *MockXormEngine) AddHook(hook contexts.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHook", hook)
}

// AddHook indicates an expected call of AddHook.
func (mr *MockXormEngineMockRecorder) AddHook(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHook", reflect.TypeOf((*MockXormEngine)(nil).AddHook), hook)
}

// Alias mocks base method.
func (m *MockXormEngine) Alias(alias string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alias", alias)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Alias indicates an expected call of Alias.
func (mr *MockXormEngineMockRecorder) Alias(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alias", reflect.TypeOf((*MockXormEngine)(nil).Alias), alias)
}

// AllCols mocks base method.
func (m *MockXormEngine) AllCols() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCols")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// AllCols indicates an expected call of AllCols.
func (mr *MockXormEngineMockRecorder) AllCols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCols", reflect.TypeOf((*MockXormEngine)(nil).AllCols))
}

// Asc mocks base method.
func (m *MockXormEngine) Asc(colNames ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Asc", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Asc indicates an expected call of Asc.
func (mr *MockXormEngineMockRecorder) Asc(colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Asc", reflect.TypeOf((*MockXormEngine)(nil).Asc), colNames...)
}

// Before mocks base method.
func (m *MockXormEngine) Before(arg0 func(any)) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Before", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Before indicates an expected call of Before.
func (mr *MockXormEngineMockRecorder) Before(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Before", reflect.TypeOf((*MockXormEngine)(nil).Before), arg0)
}

// BufferSize mocks base method.
func (m *MockXormEngine) BufferSize(size int) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferSize", size)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// BufferSize indicates an expected call of BufferSize.
func (mr *MockXormEngineMockRecorder) BufferSize(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferSize", reflect.TypeOf((*MockXormEngine)(nil).BufferSize), size)
}

// Charset mocks base method.
func (m *MockXormEngine) Charset(charset string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Charset", charset)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Charset indicates an expected call of Charset.
func (mr *MockXormEngineMockRecorder) Charset(charset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charset", reflect.TypeOf((*MockXormEngine)(nil).Charset), charset)
}

// ClearCache mocks base method.
func (m *MockXormEngine) ClearCache(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearCache", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCache indicates an expected call of ClearCache.
func (mr *MockXormEngineMockRecorder) ClearCache(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCache", reflect.TypeOf((*MockXormEngine)(nil).ClearCache), arg0...)
}

// Cols mocks base method.
func (m *MockXormEngine) Cols(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cols", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Cols indicates an expected call of Cols.
func (mr *MockXormEngineMockRecorder) Cols(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cols", reflect.TypeOf((*MockXormEngine)(nil).Cols), columns...)
}

// Context mocks base method.
func (m *MockXormEngine) Context(arg0 context.Context) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockXormEngineMockRecorder) Context(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockXormEngine)(nil).Context), arg0)
}

// Count mocks base method.
func (m *MockXormEngine) Count(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockXormEngineMockRecorder) Count(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockXormEngine)(nil).Count), arg0...)
}

// CreateIndexes mocks base method.
func (m *MockXormEngine) CreateIndexes(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes.
func (mr *MockXormEngineMockRecorder) CreateIndexes(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockXormEngine)(nil).CreateIndexes), bean)
}

// CreateTables mocks base method.
func (m *MockXormEngine) CreateTables(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTables", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables.
func (mr *MockXormEngineMockRecorder) CreateTables(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*MockXormEngine)(nil).CreateTables), arg0...)
}

// CreateUniques mocks base method.
func (m *MockXormEngine) CreateUniques(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUniques", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUniques indicates an expected call of CreateUniques.
func (mr *MockXormEngineMockRecorder) CreateUniques(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUniques", reflect.TypeOf((*MockXormEngine)(nil).CreateUniques), bean)
}

// DBMetas mocks base method.
func (m *MockXormEngine) DBMetas() ([]*schemas.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBMetas")
	ret0, _ := ret[0].([]*schemas.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBMetas indicates an expected call of DBMetas.
func (mr *MockXormEngineMockRecorder) DBMetas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBMetas", reflect.TypeOf((*MockXormEngine)(nil).DBMetas))
}

// DBVersion mocks base method.
func (m *MockXormEngine) DBVersion() (*schemas.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBVersion")
	ret0, _ := ret[0].(*schemas.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBVersion indicates an expected call of DBVersion.
func (mr *MockXormEngineMockRecorder) DBVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBVersion", reflect.TypeOf((*MockXormEngine)(nil).DBVersion))
}

// Decr mocks base method.
func (m *MockXormEngine) Decr(column string, arg ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{column}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decr", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Decr indicates an expected call of Decr.
func (mr *MockXormEngineMockRecorder) Decr(column any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{column}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockXormEngine)(nil).Decr), varargs...)
}

// Delete mocks base method.
func (m *MockXormEngine) Delete(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockXormEngineMockRecorder) Delete(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockXormEngine)(nil).Delete), arg0...)
}

// Desc mocks base method.
func (m *MockXormEngine) Desc(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Desc", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Desc indicates an expected call of Desc.
func (mr *MockXormEngineMockRecorder) Desc(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Desc", reflect.TypeOf((*MockXormEngine)(nil).Desc), arg0...)
}

// Dialect mocks base method.
func (m *MockXormEngine) Dialect() dialects.Dialect {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialect")
	ret0, _ := ret[0].(dialects.Dialect)
	return ret0
}

// Dialect indicates an expected call of Dialect.
func (mr *MockXormEngineMockRecorder) Dialect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialect", reflect.TypeOf((*MockXormEngine)(nil).Dialect))
}

// Distinct mocks base method.
func (m *MockXormEngine) Distinct(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockXormEngineMockRecorder) Distinct(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockXormEngine)(nil).Distinct), columns...)
}

// DriverName mocks base method.
func (m *MockXormEngine) DriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName.
func (mr *MockXormEngineMockRecorder) DriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockXormEngine)(nil).DriverName))
}

// DropIndexes mocks base method.
func (m *MockXormEngine) DropIndexes(bean any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropIndexes", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropIndexes indicates an expected call of DropIndexes.
func (mr *MockXormEngineMockRecorder) DropIndexes(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndexes", reflect.TypeOf((*MockXormEngine)(nil).DropIndexes), bean)
}

// DropTables mocks base method.
func (m *MockXormEngine) DropTables(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTables", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTables indicates an expected call of DropTables.
func (mr *MockXormEngineMockRecorder) DropTables(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTables", reflect.TypeOf((*MockXormEngine)(nil).DropTables), arg0...)
}

// DumpAllToFile mocks base method.
func (m *MockXormEngine) DumpAllToFile(fp string, tp ...schemas.DBType) error {
	m.ctrl.T.Helper()
	varargs := []any{fp}
	for _, a := range tp {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DumpAllToFile", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DumpAllToFile indicates an expected call of DumpAllToFile.
func (mr *MockXormEngineMockRecorder) DumpAllToFile(fp any, tp ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{fp}, tp...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpAllToFile", reflect.TypeOf((*MockXormEngine)(nil).DumpAllToFile), varargs...)
}

// EnableSessionID mocks base method.
func (m *MockXormEngine) EnableSessionID(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableSessionID", arg0)
}

// EnableSessionID indicates an expected call of EnableSessionID.
func (mr *MockXormEngineMockRecorder) EnableSessionID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSessionID", reflect.TypeOf((*MockXormEngine)(nil).EnableSessionID), arg0)
}

// Exec mocks base method.
func (m *MockXormEngine) Exec(sqlOrArgs ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockXormEngineMockRecorder) Exec(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockXormEngine)(nil).Exec), sqlOrArgs...)
}

// Exist mocks base method.
func (m *MockXormEngine) Exist(bean ...any) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range bean {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exist", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockXormEngineMockRecorder) Exist(bean ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockXormEngine)(nil).Exist), bean...)
}

// Find mocks base method.
func (m *MockXormEngine) Find(arg0 any, arg1 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockXormEngineMockRecorder) Find(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockXormEngine)(nil).Find), varargs...)
}

// FindAndCount mocks base method.
func (m *MockXormEngine) FindAndCount(arg0 any, arg1 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAndCount", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndCount indicates an expected call of FindAndCount.
func (mr *MockXormEngineMockRecorder) FindAndCount(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndCount", reflect.TypeOf((*MockXormEngine)(nil).FindAndCount), varargs...)
}

// Get mocks base method.
func (m *MockXormEngine) Get(arg0 ...any) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockXormEngineMockRecorder) Get(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockXormEngine)(nil).Get), arg0...)
}

// GetCacher mocks base method.
func (m *MockXormEngine) GetCacher(arg0 string) caches.Cacher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacher", arg0)
	ret0, _ := ret[0].(caches.Cacher)
	return ret0
}

// GetCacher indicates an expected call of GetCacher.
func (mr *MockXormEngineMockRecorder) GetCacher(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacher", reflect.TypeOf((*MockXormEngine)(nil).GetCacher), arg0)
}

// GetColumnMapper mocks base method.
func (m *MockXormEngine) GetColumnMapper() names.Mapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnMapper")
	ret0, _ := ret[0].(names.Mapper)
	return ret0
}

// GetColumnMapper indicates an expected call of GetColumnMapper.
func (mr *MockXormEngineMockRecorder) GetColumnMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnMapper", reflect.TypeOf((*MockXormEngine)(nil).GetColumnMapper))
}

// GetDefaultCacher mocks base method.
func (m *MockXormEngine) GetDefaultCacher() caches.Cacher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultCacher")
	ret0, _ := ret[0].(caches.Cacher)
	return ret0
}

// GetDefaultCacher indicates an expected call of GetDefaultCacher.
func (mr *MockXormEngineMockRecorder) GetDefaultCacher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCacher", reflect.TypeOf((*MockXormEngine)(nil).GetDefaultCacher))
}

// GetOriginEngine mocks base method.
func (m *MockXormEngine) GetOriginEngine() xorm.EngineInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginEngine")
	ret0, _ := ret[0].(xorm.EngineInterface)
	return ret0
}

// GetOriginEngine indicates an expected call of GetOriginEngine.
func (mr *MockXormEngineMockRecorder) GetOriginEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginEngine", reflect.TypeOf((*MockXormEngine)(nil).GetOriginEngine))
}

// GetTZDatabase mocks base method.
func (m *MockXormEngine) GetTZDatabase() *time.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTZDatabase")
	ret0, _ := ret[0].(*time.Location)
	return ret0
}

// GetTZDatabase indicates an expected call of GetTZDatabase.
func (mr *MockXormEngineMockRecorder) GetTZDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTZDatabase", reflect.TypeOf((*MockXormEngine)(nil).GetTZDatabase))
}

// GetTZLocation mocks base method.
func (m *MockXormEngine) GetTZLocation() *time.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTZLocation")
	ret0, _ := ret[0].(*time.Location)
	return ret0
}

// GetTZLocation indicates an expected call of GetTZLocation.
func (mr *MockXormEngineMockRecorder) GetTZLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTZLocation", reflect.TypeOf((*MockXormEngine)(nil).GetTZLocation))
}

// GetTableMapper mocks base method.
func (m *MockXormEngine) GetTableMapper() names.Mapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableMapper")
	ret0, _ := ret[0].(names.Mapper)
	return ret0
}

// GetTableMapper indicates an expected call of GetTableMapper.
func (mr *MockXormEngineMockRecorder) GetTableMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableMapper", reflect.TypeOf((*MockXormEngine)(nil).GetTableMapper))
}

// GroupBy mocks base method.
func (m *MockXormEngine) GroupBy(keys string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupBy", keys)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// GroupBy indicates an expected call of GroupBy.
func (mr *MockXormEngineMockRecorder) GroupBy(keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBy", reflect.TypeOf((*MockXormEngine)(nil).GroupBy), keys)
}

// ID mocks base method.
func (m *MockXormEngine) ID(arg0 any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockXormEngineMockRecorder) ID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockXormEngine)(nil).ID), arg0)
}

// ImportFile mocks base method.
func (m *MockXormEngine) ImportFile(fp string) ([]sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportFile", fp)
	ret0, _ := ret[0].([]sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportFile indicates an expected call of ImportFile.
func (mr *MockXormEngineMockRecorder) ImportFile(fp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFile", reflect.TypeOf((*MockXormEngine)(nil).ImportFile), fp)
}

// In mocks base method.
func (m *MockXormEngine) In(arg0 string, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "In", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// In indicates an expected call of In.
func (mr *MockXormEngineMockRecorder) In(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockXormEngine)(nil).In), varargs...)
}

// Incr mocks base method.
func (m *MockXormEngine) Incr(column string, arg ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{column}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Incr", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockXormEngineMockRecorder) Incr(column any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{column}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockXormEngine)(nil).Incr), varargs...)
}

// Insert mocks base method.
func (m *MockXormEngine) Insert(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockXormEngineMockRecorder) Insert(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockXormEngine)(nil).Insert), arg0...)
}

// InsertOne mocks base method.
func (m *MockXormEngine) InsertOne(arg0 any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockXormEngineMockRecorder) InsertOne(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockXormEngine)(nil).InsertOne), arg0)
}

// IsTableEmpty mocks base method.
func (m *MockXormEngine) IsTableEmpty(bean any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableEmpty", bean)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableEmpty indicates an expected call of IsTableEmpty.
func (mr *MockXormEngineMockRecorder) IsTableEmpty(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableEmpty", reflect.TypeOf((*MockXormEngine)(nil).IsTableEmpty), bean)
}

// IsTableExist mocks base method.
func (m *MockXormEngine) IsTableExist(beanOrTableName any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableExist", beanOrTableName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableExist indicates an expected call of IsTableExist.
func (mr *MockXormEngineMockRecorder) IsTableExist(beanOrTableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableExist", reflect.TypeOf((*MockXormEngine)(nil).IsTableExist), beanOrTableName)
}

// Iterate mocks base method.
func (m *MockXormEngine) Iterate(arg0 any, arg1 xorm.IterFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Iterate indicates an expected call of Iterate.
func (mr *MockXormEngineMockRecorder) Iterate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*MockXormEngine)(nil).Iterate), arg0, arg1)
}

// Join mocks base method.
func (m *MockXormEngine) Join(joinOperator string, tablename, condition any, args ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{joinOperator, tablename, condition}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockXormEngineMockRecorder) Join(joinOperator, tablename, condition any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{joinOperator, tablename, condition}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockXormEngine)(nil).Join), varargs...)
}

// Limit mocks base method.
func (m *MockXormEngine) Limit(arg0 int, arg1 ...int) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Limit", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockXormEngineMockRecorder) Limit(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockXormEngine)(nil).Limit), varargs...)
}

// MapCacher mocks base method.
func (m *MockXormEngine) MapCacher(arg0 any, arg1 caches.Cacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapCacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MapCacher indicates an expected call of MapCacher.
func (mr *MockXormEngineMockRecorder) MapCacher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapCacher", reflect.TypeOf((*MockXormEngine)(nil).MapCacher), arg0, arg1)
}

// MustCols mocks base method.
func (m *MockXormEngine) MustCols(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustCols", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// MustCols indicates an expected call of MustCols.
func (mr *MockXormEngineMockRecorder) MustCols(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCols", reflect.TypeOf((*MockXormEngine)(nil).MustCols), columns...)
}

// NewSession mocks base method.
func (m *MockXormEngine) NewSession() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockXormEngineMockRecorder) NewSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockXormEngine)(nil).NewSession))
}

// NoAutoCondition mocks base method.
func (m *MockXormEngine) NoAutoCondition(arg0 ...bool) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NoAutoCondition", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NoAutoCondition indicates an expected call of NoAutoCondition.
func (mr *MockXormEngineMockRecorder) NoAutoCondition(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoAutoCondition", reflect.TypeOf((*MockXormEngine)(nil).NoAutoCondition), arg0...)
}

// NoAutoTime mocks base method.
func (m *MockXormEngine) NoAutoTime() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoAutoTime")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NoAutoTime indicates an expected call of NoAutoTime.
func (mr *MockXormEngineMockRecorder) NoAutoTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoAutoTime", reflect.TypeOf((*MockXormEngine)(nil).NoAutoTime))
}

// NotIn mocks base method.
func (m *MockXormEngine) NotIn(arg0 string, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotIn", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// NotIn indicates an expected call of NotIn.
func (mr *MockXormEngineMockRecorder) NotIn(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotIn", reflect.TypeOf((*MockXormEngine)(nil).NotIn), varargs...)
}

// Nullable mocks base method.
func (m *MockXormEngine) Nullable(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nullable", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Nullable indicates an expected call of Nullable.
func (mr *MockXormEngineMockRecorder) Nullable(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nullable", reflect.TypeOf((*MockXormEngine)(nil).Nullable), arg0...)
}

// Omit mocks base method.
func (m *MockXormEngine) Omit(columns ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockXormEngineMockRecorder) Omit(columns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockXormEngine)(nil).Omit), columns...)
}

// OrderBy mocks base method.
func (m *MockXormEngine) OrderBy(order any, args ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{order}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderBy", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// OrderBy indicates an expected call of OrderBy.
func (mr *MockXormEngineMockRecorder) OrderBy(order any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{order}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBy", reflect.TypeOf((*MockXormEngine)(nil).OrderBy), varargs...)
}

// Ping mocks base method.
func (m *MockXormEngine) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockXormEngineMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockXormEngine)(nil).Ping))
}

// Prepare mocks base method.
func (m *MockXormEngine) Prepare() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockXormEngineMockRecorder) Prepare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockXormEngine)(nil).Prepare))
}

// Query mocks base method.
func (m *MockXormEngine) Query(sqlOrArgs ...any) ([]map[string][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].([]map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockXormEngineMockRecorder) Query(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockXormEngine)(nil).Query), sqlOrArgs...)
}

// QueryInterface mocks base method.
func (m *MockXormEngine) QueryInterface(sqlOrArgs ...any) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryInterface", varargs...)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInterface indicates an expected call of QueryInterface.
func (mr *MockXormEngineMockRecorder) QueryInterface(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInterface", reflect.TypeOf((*MockXormEngine)(nil).QueryInterface), sqlOrArgs...)
}

// QueryString mocks base method.
func (m *MockXormEngine) QueryString(sqlOrArgs ...any) ([]map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sqlOrArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryString", varargs...)
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryString indicates an expected call of QueryString.
func (mr *MockXormEngineMockRecorder) QueryString(sqlOrArgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryString", reflect.TypeOf((*MockXormEngine)(nil).QueryString), sqlOrArgs...)
}

// Quote mocks base method.
func (m *MockXormEngine) Quote(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quote", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Quote indicates an expected call of Quote.
func (mr *MockXormEngineMockRecorder) Quote(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quote", reflect.TypeOf((*MockXormEngine)(nil).Quote), arg0)
}

// Rows mocks base method.
func (m *MockXormEngine) Rows(bean any) (*xorm.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows", bean)
	ret0, _ := ret[0].(*xorm.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockXormEngineMockRecorder) Rows(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockXormEngine)(nil).Rows), bean)
}

// SQL mocks base method.
func (m *MockXormEngine) SQL(arg0 any, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SQL", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// SQL indicates an expected call of SQL.
func (mr *MockXormEngineMockRecorder) SQL(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQL", reflect.TypeOf((*MockXormEngine)(nil).SQL), varargs...)
}

// Select mocks base method.
func (m *MockXormEngine) Select(arg0 string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockXormEngineMockRecorder) Select(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockXormEngine)(nil).Select), arg0)
}

// SetCacher mocks base method.
func (m *MockXormEngine) SetCacher(arg0 string, arg1 caches.Cacher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCacher", arg0, arg1)
}

// SetCacher indicates an expected call of SetCacher.
func (mr *MockXormEngineMockRecorder) SetCacher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacher", reflect.TypeOf((*MockXormEngine)(nil).SetCacher), arg0, arg1)
}

// SetColumnMapper mocks base method.
func (m *MockXormEngine) SetColumnMapper(arg0 names.Mapper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetColumnMapper", arg0)
}

// SetColumnMapper indicates an expected call of SetColumnMapper.
func (mr *MockXormEngineMockRecorder) SetColumnMapper(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColumnMapper", reflect.TypeOf((*MockXormEngine)(nil).SetColumnMapper), arg0)
}

// SetConnMaxLifetime mocks base method.
func (m *MockXormEngine) SetConnMaxLifetime(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxLifetime", arg0)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime.
func (mr *MockXormEngineMockRecorder) SetConnMaxLifetime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockXormEngine)(nil).SetConnMaxLifetime), arg0)
}

// SetDefaultCacher mocks base method.
func (m *MockXormEngine) SetDefaultCacher(arg0 caches.Cacher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultCacher", arg0)
}

// SetDefaultCacher indicates an expected call of SetDefaultCacher.
func (mr *MockXormEngineMockRecorder) SetDefaultCacher(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultCacher", reflect.TypeOf((*MockXormEngine)(nil).SetDefaultCacher), arg0)
}

// SetExpr mocks base method.
func (m *MockXormEngine) SetExpr(arg0 string, arg1 any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpr", arg0, arg1)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// SetExpr indicates an expected call of SetExpr.
func (mr *MockXormEngineMockRecorder) SetExpr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpr", reflect.TypeOf((*MockXormEngine)(nil).SetExpr), arg0, arg1)
}

// SetLogLevel mocks base method.
func (m *MockXormEngine) SetLogLevel(arg0 log.LogLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogLevel", arg0)
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockXormEngineMockRecorder) SetLogLevel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockXormEngine)(nil).SetLogLevel), arg0)
}

// SetLogger mocks base method.
func (m *MockXormEngine) SetLogger(logger any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", logger)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockXormEngineMockRecorder) SetLogger(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockXormEngine)(nil).SetLogger), logger)
}

// SetMapper mocks base method.
func (m *MockXormEngine) SetMapper(arg0 names.Mapper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMapper", arg0)
}

// SetMapper indicates an expected call of SetMapper.
func (mr *MockXormEngineMockRecorder) SetMapper(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMapper", reflect.TypeOf((*MockXormEngine)(nil).SetMapper), arg0)
}

// SetMaxIdleConns mocks base method.
func (m *MockXormEngine) SetMaxIdleConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", arg0)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockXormEngineMockRecorder) SetMaxIdleConns(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockXormEngine)(nil).SetMaxIdleConns), arg0)
}

// SetMaxOpenConns mocks base method.
func (m *MockXormEngine) SetMaxOpenConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", arg0)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockXormEngineMockRecorder) SetMaxOpenConns(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockXormEngine)(nil).SetMaxOpenConns), arg0)
}

// SetPolicy mocks base method.
func (m *MockXormEngine) SetPolicy(policy xorm.GroupPolicy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPolicy", policy)
}

// SetPolicy indicates an expected call of SetPolicy.
func (mr *MockXormEngineMockRecorder) SetPolicy(policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPolicy", reflect.TypeOf((*MockXormEngine)(nil).SetPolicy), policy)
}

// SetQuotePolicy mocks base method.
func (m *MockXormEngine) SetQuotePolicy(arg0 dialects.QuotePolicy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQuotePolicy", arg0)
}

// SetQuotePolicy indicates an expected call of SetQuotePolicy.
func (mr *MockXormEngineMockRecorder) SetQuotePolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuotePolicy", reflect.TypeOf((*MockXormEngine)(nil).SetQuotePolicy), arg0)
}

// SetSchema mocks base method.
func (m *MockXormEngine) SetSchema(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSchema", arg0)
}

// SetSchema indicates an expected call of SetSchema.
func (mr *MockXormEngineMockRecorder) SetSchema(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchema", reflect.TypeOf((*MockXormEngine)(nil).SetSchema), arg0)
}

// SetTZDatabase mocks base method.
func (m *MockXormEngine) SetTZDatabase(tz *time.Location) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTZDatabase", tz)
}

// SetTZDatabase indicates an expected call of SetTZDatabase.
func (mr *MockXormEngineMockRecorder) SetTZDatabase(tz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTZDatabase", reflect.TypeOf((*MockXormEngine)(nil).SetTZDatabase), tz)
}

// SetTZLocation mocks base method.
func (m *MockXormEngine) SetTZLocation(tz *time.Location) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTZLocation", tz)
}

// SetTZLocation indicates an expected call of SetTZLocation.
func (mr *MockXormEngineMockRecorder) SetTZLocation(tz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTZLocation", reflect.TypeOf((*MockXormEngine)(nil).SetTZLocation), tz)
}

// SetTableMapper mocks base method.
func (m *MockXormEngine) SetTableMapper(arg0 names.Mapper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTableMapper", arg0)
}

// SetTableMapper indicates an expected call of SetTableMapper.
func (mr *MockXormEngineMockRecorder) SetTableMapper(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTableMapper", reflect.TypeOf((*MockXormEngine)(nil).SetTableMapper), arg0)
}

// SetTagIdentifier mocks base method.
func (m *MockXormEngine) SetTagIdentifier(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTagIdentifier", arg0)
}

// SetTagIdentifier indicates an expected call of SetTagIdentifier.
func (mr *MockXormEngineMockRecorder) SetTagIdentifier(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTagIdentifier", reflect.TypeOf((*MockXormEngine)(nil).SetTagIdentifier), arg0)
}

// ShowSQL mocks base method.
func (m *MockXormEngine) ShowSQL(show ...bool) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range show {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ShowSQL", varargs...)
}

// ShowSQL indicates an expected call of ShowSQL.
func (mr *MockXormEngineMockRecorder) ShowSQL(show ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSQL", reflect.TypeOf((*MockXormEngine)(nil).ShowSQL), show...)
}

// Sqlx mocks base method.
func (m *MockXormEngine) Sqlx(sql string, args ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sqlx", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Sqlx indicates an expected call of Sqlx.
func (mr *MockXormEngineMockRecorder) Sqlx(sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sqlx", reflect.TypeOf((*MockXormEngine)(nil).Sqlx), varargs...)
}

// StoreEngine mocks base method.
func (m *MockXormEngine) StoreEngine(storeEngine string) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEngine", storeEngine)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// StoreEngine indicates an expected call of StoreEngine.
func (mr *MockXormEngineMockRecorder) StoreEngine(storeEngine any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEngine", reflect.TypeOf((*MockXormEngine)(nil).StoreEngine), storeEngine)
}

// Sum mocks base method.
func (m *MockXormEngine) Sum(bean any, colName string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum", bean, colName)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sum indicates an expected call of Sum.
func (mr *MockXormEngineMockRecorder) Sum(bean, colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockXormEngine)(nil).Sum), bean, colName)
}

// SumInt mocks base method.
func (m *MockXormEngine) SumInt(bean any, colName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumInt", bean, colName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumInt indicates an expected call of SumInt.
func (mr *MockXormEngineMockRecorder) SumInt(bean, colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumInt", reflect.TypeOf((*MockXormEngine)(nil).SumInt), bean, colName)
}

// Sums mocks base method.
func (m *MockXormEngine) Sums(bean any, colNames ...string) ([]float64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sums", varargs...)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sums indicates an expected call of Sums.
func (mr *MockXormEngineMockRecorder) Sums(bean any, colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, colNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sums", reflect.TypeOf((*MockXormEngine)(nil).Sums), varargs...)
}

// SumsInt mocks base method.
func (m *MockXormEngine) SumsInt(bean any, colNames ...string) ([]int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range colNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SumsInt", varargs...)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumsInt indicates an expected call of SumsInt.
func (mr *MockXormEngineMockRecorder) SumsInt(bean any, colNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, colNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumsInt", reflect.TypeOf((*MockXormEngine)(nil).SumsInt), varargs...)
}

// Sync mocks base method.
func (m *MockXormEngine) Sync(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockXormEngineMockRecorder) Sync(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockXormEngine)(nil).Sync), arg0...)
}

// Sync2 mocks base method.
func (m *MockXormEngine) Sync2(arg0 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync2", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync2 indicates an expected call of Sync2.
func (mr *MockXormEngineMockRecorder) Sync2(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync2", reflect.TypeOf((*MockXormEngine)(nil).Sync2), arg0...)
}

// SyncWithOptions mocks base method.
func (m *MockXormEngine) SyncWithOptions(arg0 xorm.SyncOptions, arg1 ...any) (*xorm.SyncResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncWithOptions", varargs...)
	ret0, _ := ret[0].(*xorm.SyncResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncWithOptions indicates an expected call of SyncWithOptions.
func (mr *MockXormEngineMockRecorder) SyncWithOptions(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncWithOptions", reflect.TypeOf((*MockXormEngine)(nil).SyncWithOptions), varargs...)
}

// Table mocks base method.
func (m *MockXormEngine) Table(tableNameOrBean any) *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", tableNameOrBean)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockXormEngineMockRecorder) Table(tableNameOrBean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockXormEngine)(nil).Table), tableNameOrBean)
}

// TableInfo mocks base method.
func (m *MockXormEngine) TableInfo(bean any) (*schemas.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableInfo", bean)
	ret0, _ := ret[0].(*schemas.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableInfo indicates an expected call of TableInfo.
func (mr *MockXormEngineMockRecorder) TableInfo(bean any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableInfo", reflect.TypeOf((*MockXormEngine)(nil).TableInfo), bean)
}

// TableName mocks base method.
func (m *MockXormEngine) TableName(arg0 any, arg1 ...bool) string {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableName", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// TableName indicates an expected call of TableName.
func (mr *MockXormEngineMockRecorder) TableName(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableName", reflect.TypeOf((*MockXormEngine)(nil).TableName), varargs...)
}

// Transaction mocks base method.
func (m *MockXormEngine) Transaction(fn func(xorm.Interface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockXormEngineMockRecorder) Transaction(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockXormEngine)(nil).Transaction), fn)
}

// Truncate mocks base method.
func (m *MockXormEngine) Truncate(arg0 ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Truncate", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Truncate indicates an expected call of Truncate.
func (mr *MockXormEngineMockRecorder) Truncate(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockXormEngine)(nil).Truncate), arg0...)
}

// UnMapType mocks base method.
func (m *MockXormEngine) UnMapType(arg0 reflect.Type) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnMapType", arg0)
}

// UnMapType indicates an expected call of UnMapType.
func (mr *MockXormEngineMockRecorder) UnMapType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMapType", reflect.TypeOf((*MockXormEngine)(nil).UnMapType), arg0)
}

// Unscoped mocks base method.
func (m *MockXormEngine) Unscoped() *xorm.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockXormEngineMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockXormEngine)(nil).Unscoped))
}

// Update mocks base method.
func (m *MockXormEngine) Update(bean any, condiBeans ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{bean}
	for _, a := range condiBeans {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockXormEngineMockRecorder) Update(bean any, condiBeans ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{bean}, condiBeans...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockXormEngine)(nil).Update), varargs...)
}

// UseBool mocks base method.
func (m *MockXormEngine) UseBool(arg0 ...string) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseBool", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// UseBool indicates an expected call of UseBool.
func (mr *MockXormEngineMockRecorder) UseBool(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseBool", reflect.TypeOf((*MockXormEngine)(nil).UseBool), arg0...)
}

// Where mocks base method.
func (m *MockXormEngine) Where(arg0 any, arg1 ...any) *xorm.Session {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*xorm.Session)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockXormEngineMockRecorder) Where(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockXormEngine)(nil).Where), varargs...)
}
