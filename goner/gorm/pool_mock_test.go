// Code generated by MockGen. DO NOT EDIT.
// Source: ./priest_test.go
//
// Generated by this command:
//
//	mockgen -package gorm -destination=./pool_mock_test.go -source=./priest_test.go
//

// Package gorm is a generated GoMock package.
package gorm

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTestPool is a mock of TestPool interface.
type MockTestPool struct {
	ctrl     *gomock.Controller
	recorder *MockTestPoolMockRecorder
	isgomock struct{}
}

// MockTestPoolMockRecorder is the mock recorder for MockTestPool.
type MockTestPoolMockRecorder struct {
	mock *MockTestPool
}

// NewMockTestPool creates a new mock instance.
func NewMockTestPool(ctrl *gomock.Controller) *MockTestPool {
	mock := &MockTestPool{ctrl: ctrl}
	mock.recorder = &MockTestPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestPool) EXPECT() *MockTestPoolMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockTestPool) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockTestPoolMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockTestPool)(nil).ExecContext), varargs...)
}

// GetDBConn mocks base method.
func (m *MockTestPool) GetDBConn() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBConn")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBConn indicates an expected call of GetDBConn.
func (mr *MockTestPoolMockRecorder) GetDBConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBConn", reflect.TypeOf((*MockTestPool)(nil).GetDBConn))
}

// PrepareContext mocks base method.
func (m *MockTestPool) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockTestPoolMockRecorder) PrepareContext(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockTestPool)(nil).PrepareContext), ctx, query)
}

// QueryContext mocks base method.
func (m *MockTestPool) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockTestPoolMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockTestPool)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockTestPool) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockTestPoolMockRecorder) QueryRowContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockTestPool)(nil).QueryRowContext), varargs...)
}
