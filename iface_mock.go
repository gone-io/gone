// Code generated by MockGen. DO NOT EDIT.
// Source: ./iface.go
//
// Generated by this command:
//
//	mockgen -source=./iface.go -package=gone -destination=iface_mock.go
//

// Package gone is a generated GoMock package.
package gone

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockiKeeper is a mock of iKeeper interface.
type MockiKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockiKeeperMockRecorder
	isgomock struct{}
}

// MockiKeeperMockRecorder is the mock recorder for MockiKeeper.
type MockiKeeperMockRecorder struct {
	mock *MockiKeeper
}

// NewMockiKeeper creates a new mock instance.
func NewMockiKeeper(ctrl *gomock.Controller) *MockiKeeper {
	mock := &MockiKeeper{ctrl: ctrl}
	mock.recorder = &MockiKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiKeeper) EXPECT() *MockiKeeperMockRecorder {
	return m.recorder
}

// getAllCoffins mocks base method.
func (m *MockiKeeper) getAllCoffins() []*coffin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAllCoffins")
	ret0, _ := ret[0].([]*coffin)
	return ret0
}

// getAllCoffins indicates an expected call of getAllCoffins.
func (mr *MockiKeeperMockRecorder) getAllCoffins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllCoffins", reflect.TypeOf((*MockiKeeper)(nil).getAllCoffins))
}

// getByName mocks base method.
func (m *MockiKeeper) getByName(name string) *coffin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getByName", name)
	ret0, _ := ret[0].(*coffin)
	return ret0
}

// getByName indicates an expected call of getByName.
func (mr *MockiKeeperMockRecorder) getByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getByName", reflect.TypeOf((*MockiKeeper)(nil).getByName), name)
}

// getByTypeAndPattern mocks base method.
func (m *MockiKeeper) getByTypeAndPattern(t reflect.Type, pattern string) []*coffin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getByTypeAndPattern", t, pattern)
	ret0, _ := ret[0].([]*coffin)
	return ret0
}

// getByTypeAndPattern indicates an expected call of getByTypeAndPattern.
func (mr *MockiKeeperMockRecorder) getByTypeAndPattern(t, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getByTypeAndPattern", reflect.TypeOf((*MockiKeeper)(nil).getByTypeAndPattern), t, pattern)
}

// load mocks base method.
func (m *MockiKeeper) load(goner Goner, options ...Option) error {
	m.ctrl.T.Helper()
	varargs := []any{goner}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "load", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// load indicates an expected call of load.
func (mr *MockiKeeperMockRecorder) load(goner any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{goner}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "load", reflect.TypeOf((*MockiKeeper)(nil).load), varargs...)
}

// selectOneCoffin mocks base method.
func (m *MockiKeeper) selectOneCoffin(t reflect.Type, gonerName string, warn func()) *coffin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "selectOneCoffin", t, gonerName, warn)
	ret0, _ := ret[0].(*coffin)
	return ret0
}

// selectOneCoffin indicates an expected call of selectOneCoffin.
func (mr *MockiKeeperMockRecorder) selectOneCoffin(t, gonerName, warn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "selectOneCoffin", reflect.TypeOf((*MockiKeeper)(nil).selectOneCoffin), t, gonerName, warn)
}

// MockiDependenceAnalyzer is a mock of iDependenceAnalyzer interface.
type MockiDependenceAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockiDependenceAnalyzerMockRecorder
	isgomock struct{}
}

// MockiDependenceAnalyzerMockRecorder is the mock recorder for MockiDependenceAnalyzer.
type MockiDependenceAnalyzerMockRecorder struct {
	mock *MockiDependenceAnalyzer
}

// NewMockiDependenceAnalyzer creates a new mock instance.
func NewMockiDependenceAnalyzer(ctrl *gomock.Controller) *MockiDependenceAnalyzer {
	mock := &MockiDependenceAnalyzer{ctrl: ctrl}
	mock.recorder = &MockiDependenceAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiDependenceAnalyzer) EXPECT() *MockiDependenceAnalyzerMockRecorder {
	return m.recorder
}

// analyzerFieldDependencies mocks base method.
func (m *MockiDependenceAnalyzer) analyzerFieldDependencies(field reflect.StructField, coName string, process func(bool, bool, string, ...*coffin) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "analyzerFieldDependencies", field, coName, process)
	ret0, _ := ret[0].(error)
	return ret0
}

// analyzerFieldDependencies indicates an expected call of analyzerFieldDependencies.
func (mr *MockiDependenceAnalyzerMockRecorder) analyzerFieldDependencies(field, coName, process any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "analyzerFieldDependencies", reflect.TypeOf((*MockiDependenceAnalyzer)(nil).analyzerFieldDependencies), field, coName, process)
}

// checkCircularDepsAndGetBestInitOrder mocks base method.
func (m *MockiDependenceAnalyzer) checkCircularDepsAndGetBestInitOrder() ([]dependency, []dependency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "checkCircularDepsAndGetBestInitOrder")
	ret0, _ := ret[0].([]dependency)
	ret1, _ := ret[1].([]dependency)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// checkCircularDepsAndGetBestInitOrder indicates an expected call of checkCircularDepsAndGetBestInitOrder.
func (mr *MockiDependenceAnalyzerMockRecorder) checkCircularDepsAndGetBestInitOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "checkCircularDepsAndGetBestInitOrder", reflect.TypeOf((*MockiDependenceAnalyzer)(nil).checkCircularDepsAndGetBestInitOrder))
}

// MockiInstaller is a mock of iInstaller interface.
type MockiInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockiInstallerMockRecorder
	isgomock struct{}
}

// MockiInstallerMockRecorder is the mock recorder for MockiInstaller.
type MockiInstallerMockRecorder struct {
	mock *MockiInstaller
}

// NewMockiInstaller creates a new mock instance.
func NewMockiInstaller(ctrl *gomock.Controller) *MockiInstaller {
	mock := &MockiInstaller{ctrl: ctrl}
	mock.recorder = &MockiInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiInstaller) EXPECT() *MockiInstallerMockRecorder {
	return m.recorder
}

// analyzerFieldDependencies mocks base method.
func (m *MockiInstaller) analyzerFieldDependencies(field reflect.StructField, coName string, process func(bool, bool, string, ...*coffin) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "analyzerFieldDependencies", field, coName, process)
	ret0, _ := ret[0].(error)
	return ret0
}

// analyzerFieldDependencies indicates an expected call of analyzerFieldDependencies.
func (mr *MockiInstallerMockRecorder) analyzerFieldDependencies(field, coName, process any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "analyzerFieldDependencies", reflect.TypeOf((*MockiInstaller)(nil).analyzerFieldDependencies), field, coName, process)
}

// injectField mocks base method.
func (m *MockiInstaller) injectField(asSlice, byName bool, extend string, depCoffins []*coffin, field reflect.StructField, v reflect.Value, coName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "injectField", asSlice, byName, extend, depCoffins, field, v, coName)
	ret0, _ := ret[0].(error)
	return ret0
}

// injectField indicates an expected call of injectField.
func (mr *MockiInstallerMockRecorder) injectField(asSlice, byName, extend, depCoffins, field, v, coName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "injectField", reflect.TypeOf((*MockiInstaller)(nil).injectField), asSlice, byName, extend, depCoffins, field, v, coName)
}

// safeFillOne mocks base method.
func (m *MockiInstaller) safeFillOne(c *coffin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "safeFillOne", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// safeFillOne indicates an expected call of safeFillOne.
func (mr *MockiInstallerMockRecorder) safeFillOne(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "safeFillOne", reflect.TypeOf((*MockiInstaller)(nil).safeFillOne), c)
}

// safeInitOne mocks base method.
func (m *MockiInstaller) safeInitOne(c *coffin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "safeInitOne", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// safeInitOne indicates an expected call of safeInitOne.
func (mr *MockiInstallerMockRecorder) safeInitOne(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "safeInitOne", reflect.TypeOf((*MockiInstaller)(nil).safeInitOne), c)
}
