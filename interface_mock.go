// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -package=gone -destination=interface_mock.go
//

// Package gone is a generated GoMock package.
package gone

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGoner is a mock of Goner interface.
type MockGoner struct {
	ctrl     *gomock.Controller
	recorder *MockGonerMockRecorder
	isgomock struct{}
}

// MockGonerMockRecorder is the mock recorder for MockGoner.
type MockGonerMockRecorder struct {
	mock *MockGoner
}

// NewMockGoner creates a new mock instance.
func NewMockGoner(ctrl *gomock.Controller) *MockGoner {
	mock := &MockGoner{ctrl: ctrl}
	mock.recorder = &MockGonerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoner) EXPECT() *MockGonerMockRecorder {
	return m.recorder
}

// goneFlag mocks base method.
func (m *MockGoner) goneFlag() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "goneFlag")
}

// goneFlag indicates an expected call of goneFlag.
func (mr *MockGonerMockRecorder) goneFlag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "goneFlag", reflect.TypeOf((*MockGoner)(nil).goneFlag))
}

// MockNamedGoner is a mock of NamedGoner interface.
type MockNamedGoner struct {
	ctrl     *gomock.Controller
	recorder *MockNamedGonerMockRecorder
	isgomock struct{}
}

// MockNamedGonerMockRecorder is the mock recorder for MockNamedGoner.
type MockNamedGonerMockRecorder struct {
	mock *MockNamedGoner
}

// NewMockNamedGoner creates a new mock instance.
func NewMockNamedGoner(ctrl *gomock.Controller) *MockNamedGoner {
	mock := &MockNamedGoner{ctrl: ctrl}
	mock.recorder = &MockNamedGonerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedGoner) EXPECT() *MockNamedGonerMockRecorder {
	return m.recorder
}

// GonerName mocks base method.
func (m *MockNamedGoner) GonerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GonerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GonerName indicates an expected call of GonerName.
func (mr *MockNamedGonerMockRecorder) GonerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GonerName", reflect.TypeOf((*MockNamedGoner)(nil).GonerName))
}

// goneFlag mocks base method.
func (m *MockNamedGoner) goneFlag() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "goneFlag")
}

// goneFlag indicates an expected call of goneFlag.
func (mr *MockNamedGonerMockRecorder) goneFlag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "goneFlag", reflect.TypeOf((*MockNamedGoner)(nil).goneFlag))
}

// MockInitiator is a mock of Initiator interface.
type MockInitiator struct {
	ctrl     *gomock.Controller
	recorder *MockInitiatorMockRecorder
	isgomock struct{}
}

// MockInitiatorMockRecorder is the mock recorder for MockInitiator.
type MockInitiatorMockRecorder struct {
	mock *MockInitiator
}

// NewMockInitiator creates a new mock instance.
func NewMockInitiator(ctrl *gomock.Controller) *MockInitiator {
	mock := &MockInitiator{ctrl: ctrl}
	mock.recorder = &MockInitiatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitiator) EXPECT() *MockInitiatorMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockInitiator) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockInitiatorMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInitiator)(nil).Init))
}

// MockInitiatorNoError is a mock of InitiatorNoError interface.
type MockInitiatorNoError struct {
	ctrl     *gomock.Controller
	recorder *MockInitiatorNoErrorMockRecorder
	isgomock struct{}
}

// MockInitiatorNoErrorMockRecorder is the mock recorder for MockInitiatorNoError.
type MockInitiatorNoErrorMockRecorder struct {
	mock *MockInitiatorNoError
}

// NewMockInitiatorNoError creates a new mock instance.
func NewMockInitiatorNoError(ctrl *gomock.Controller) *MockInitiatorNoError {
	mock := &MockInitiatorNoError{ctrl: ctrl}
	mock.recorder = &MockInitiatorNoErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitiatorNoError) EXPECT() *MockInitiatorNoErrorMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockInitiatorNoError) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockInitiatorNoErrorMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInitiatorNoError)(nil).Init))
}

// MockBeforeInitiator is a mock of BeforeInitiator interface.
type MockBeforeInitiator struct {
	ctrl     *gomock.Controller
	recorder *MockBeforeInitiatorMockRecorder
	isgomock struct{}
}

// MockBeforeInitiatorMockRecorder is the mock recorder for MockBeforeInitiator.
type MockBeforeInitiatorMockRecorder struct {
	mock *MockBeforeInitiator
}

// NewMockBeforeInitiator creates a new mock instance.
func NewMockBeforeInitiator(ctrl *gomock.Controller) *MockBeforeInitiator {
	mock := &MockBeforeInitiator{ctrl: ctrl}
	mock.recorder = &MockBeforeInitiatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeforeInitiator) EXPECT() *MockBeforeInitiatorMockRecorder {
	return m.recorder
}

// BeforeInit mocks base method.
func (m *MockBeforeInitiator) BeforeInit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeInit")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeInit indicates an expected call of BeforeInit.
func (mr *MockBeforeInitiatorMockRecorder) BeforeInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeInit", reflect.TypeOf((*MockBeforeInitiator)(nil).BeforeInit))
}

// MockBeforeInitiatorNoError is a mock of BeforeInitiatorNoError interface.
type MockBeforeInitiatorNoError struct {
	ctrl     *gomock.Controller
	recorder *MockBeforeInitiatorNoErrorMockRecorder
	isgomock struct{}
}

// MockBeforeInitiatorNoErrorMockRecorder is the mock recorder for MockBeforeInitiatorNoError.
type MockBeforeInitiatorNoErrorMockRecorder struct {
	mock *MockBeforeInitiatorNoError
}

// NewMockBeforeInitiatorNoError creates a new mock instance.
func NewMockBeforeInitiatorNoError(ctrl *gomock.Controller) *MockBeforeInitiatorNoError {
	mock := &MockBeforeInitiatorNoError{ctrl: ctrl}
	mock.recorder = &MockBeforeInitiatorNoErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeforeInitiatorNoError) EXPECT() *MockBeforeInitiatorNoErrorMockRecorder {
	return m.recorder
}

// BeforeInit mocks base method.
func (m *MockBeforeInitiatorNoError) BeforeInit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeInit")
}

// BeforeInit indicates an expected call of BeforeInit.
func (mr *MockBeforeInitiatorNoErrorMockRecorder) BeforeInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeInit", reflect.TypeOf((*MockBeforeInitiatorNoError)(nil).BeforeInit))
}

// MockProvider is a mock of Provider interface.
type MockProvider[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder[T]
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder[T any] struct {
	mock *MockProvider[T]
}

// NewMockProvider creates a new mock instance.
func NewMockProvider[T any](ctrl *gomock.Controller) *MockProvider[T] {
	mock := &MockProvider[T]{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider[T]) EXPECT() *MockProviderMockRecorder[T] {
	return m.recorder
}

// Provide mocks base method.
func (m *MockProvider[T]) Provide(tagConf string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide", tagConf)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockProviderMockRecorder[T]) Provide(tagConf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockProvider[T])(nil).Provide), tagConf)
}

// goneFlag mocks base method.
func (m *MockProvider[T]) goneFlag() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "goneFlag")
}

// goneFlag indicates an expected call of goneFlag.
func (mr *MockProviderMockRecorder[T]) goneFlag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "goneFlag", reflect.TypeOf((*MockProvider[T])(nil).goneFlag))
}

// MockNoneParamProvider is a mock of NoneParamProvider interface.
type MockNoneParamProvider[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockNoneParamProviderMockRecorder[T]
	isgomock struct{}
}

// MockNoneParamProviderMockRecorder is the mock recorder for MockNoneParamProvider.
type MockNoneParamProviderMockRecorder[T any] struct {
	mock *MockNoneParamProvider[T]
}

// NewMockNoneParamProvider creates a new mock instance.
func NewMockNoneParamProvider[T any](ctrl *gomock.Controller) *MockNoneParamProvider[T] {
	mock := &MockNoneParamProvider[T]{ctrl: ctrl}
	mock.recorder = &MockNoneParamProviderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoneParamProvider[T]) EXPECT() *MockNoneParamProviderMockRecorder[T] {
	return m.recorder
}

// Provide mocks base method.
func (m *MockNoneParamProvider[T]) Provide() (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide")
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockNoneParamProviderMockRecorder[T]) Provide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockNoneParamProvider[T])(nil).Provide))
}

// goneFlag mocks base method.
func (m *MockNoneParamProvider[T]) goneFlag() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "goneFlag")
}

// goneFlag indicates an expected call of goneFlag.
func (mr *MockNoneParamProviderMockRecorder[T]) goneFlag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "goneFlag", reflect.TypeOf((*MockNoneParamProvider[T])(nil).goneFlag))
}

// MockNamedProvider is a mock of NamedProvider interface.
type MockNamedProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNamedProviderMockRecorder
	isgomock struct{}
}

// MockNamedProviderMockRecorder is the mock recorder for MockNamedProvider.
type MockNamedProviderMockRecorder struct {
	mock *MockNamedProvider
}

// NewMockNamedProvider creates a new mock instance.
func NewMockNamedProvider(ctrl *gomock.Controller) *MockNamedProvider {
	mock := &MockNamedProvider{ctrl: ctrl}
	mock.recorder = &MockNamedProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedProvider) EXPECT() *MockNamedProviderMockRecorder {
	return m.recorder
}

// GonerName mocks base method.
func (m *MockNamedProvider) GonerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GonerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GonerName indicates an expected call of GonerName.
func (mr *MockNamedProviderMockRecorder) GonerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GonerName", reflect.TypeOf((*MockNamedProvider)(nil).GonerName))
}

// Provide mocks base method.
func (m *MockNamedProvider) Provide(tagConf string, t reflect.Type) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide", tagConf, t)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockNamedProviderMockRecorder) Provide(tagConf, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockNamedProvider)(nil).Provide), tagConf, t)
}

// goneFlag mocks base method.
func (m *MockNamedProvider) goneFlag() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "goneFlag")
}

// goneFlag indicates an expected call of goneFlag.
func (mr *MockNamedProviderMockRecorder) goneFlag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "goneFlag", reflect.TypeOf((*MockNamedProvider)(nil).goneFlag))
}

// MockStructFieldInjector is a mock of StructFieldInjector interface.
type MockStructFieldInjector struct {
	ctrl     *gomock.Controller
	recorder *MockStructFieldInjectorMockRecorder
	isgomock struct{}
}

// MockStructFieldInjectorMockRecorder is the mock recorder for MockStructFieldInjector.
type MockStructFieldInjectorMockRecorder struct {
	mock *MockStructFieldInjector
}

// NewMockStructFieldInjector creates a new mock instance.
func NewMockStructFieldInjector(ctrl *gomock.Controller) *MockStructFieldInjector {
	mock := &MockStructFieldInjector{ctrl: ctrl}
	mock.recorder = &MockStructFieldInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStructFieldInjector) EXPECT() *MockStructFieldInjectorMockRecorder {
	return m.recorder
}

// GonerName mocks base method.
func (m *MockStructFieldInjector) GonerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GonerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GonerName indicates an expected call of GonerName.
func (mr *MockStructFieldInjectorMockRecorder) GonerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GonerName", reflect.TypeOf((*MockStructFieldInjector)(nil).GonerName))
}

// Inject mocks base method.
func (m *MockStructFieldInjector) Inject(tagConf string, field reflect.StructField, fieldValue reflect.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inject", tagConf, field, fieldValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inject indicates an expected call of Inject.
func (mr *MockStructFieldInjectorMockRecorder) Inject(tagConf, field, fieldValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockStructFieldInjector)(nil).Inject), tagConf, field, fieldValue)
}

// goneFlag mocks base method.
func (m *MockStructFieldInjector) goneFlag() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "goneFlag")
}

// goneFlag indicates an expected call of goneFlag.
func (mr *MockStructFieldInjectorMockRecorder) goneFlag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "goneFlag", reflect.TypeOf((*MockStructFieldInjector)(nil).goneFlag))
}

// MockDaemon is a mock of Daemon interface.
type MockDaemon struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonMockRecorder
	isgomock struct{}
}

// MockDaemonMockRecorder is the mock recorder for MockDaemon.
type MockDaemonMockRecorder struct {
	mock *MockDaemon
}

// NewMockDaemon creates a new mock instance.
func NewMockDaemon(ctrl *gomock.Controller) *MockDaemon {
	mock := &MockDaemon{ctrl: ctrl}
	mock.recorder = &MockDaemonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDaemon) EXPECT() *MockDaemonMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockDaemon) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockDaemonMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDaemon)(nil).Start))
}

// Stop mocks base method.
func (m *MockDaemon) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDaemonMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDaemon)(nil).Stop))
}

// MockFuncInjector is a mock of FuncInjector interface.
type MockFuncInjector struct {
	ctrl     *gomock.Controller
	recorder *MockFuncInjectorMockRecorder
	isgomock struct{}
}

// MockFuncInjectorMockRecorder is the mock recorder for MockFuncInjector.
type MockFuncInjectorMockRecorder struct {
	mock *MockFuncInjector
}

// NewMockFuncInjector creates a new mock instance.
func NewMockFuncInjector(ctrl *gomock.Controller) *MockFuncInjector {
	mock := &MockFuncInjector{ctrl: ctrl}
	mock.recorder = &MockFuncInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFuncInjector) EXPECT() *MockFuncInjectorMockRecorder {
	return m.recorder
}

// InjectFuncParameters mocks base method.
func (m *MockFuncInjector) InjectFuncParameters(fn any, injectBefore, injectAfter FuncInjectHook) ([]reflect.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectFuncParameters", fn, injectBefore, injectAfter)
	ret0, _ := ret[0].([]reflect.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InjectFuncParameters indicates an expected call of InjectFuncParameters.
func (mr *MockFuncInjectorMockRecorder) InjectFuncParameters(fn, injectBefore, injectAfter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectFuncParameters", reflect.TypeOf((*MockFuncInjector)(nil).InjectFuncParameters), fn, injectBefore, injectAfter)
}

// InjectWrapFunc mocks base method.
func (m *MockFuncInjector) InjectWrapFunc(fn any, injectBefore, injectAfter FuncInjectHook) (func() []any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectWrapFunc", fn, injectBefore, injectAfter)
	ret0, _ := ret[0].(func() []any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InjectWrapFunc indicates an expected call of InjectWrapFunc.
func (mr *MockFuncInjectorMockRecorder) InjectWrapFunc(fn, injectBefore, injectAfter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectWrapFunc", reflect.TypeOf((*MockFuncInjector)(nil).InjectWrapFunc), fn, injectBefore, injectAfter)
}

// MockStructInjector is a mock of StructInjector interface.
type MockStructInjector struct {
	ctrl     *gomock.Controller
	recorder *MockStructInjectorMockRecorder
	isgomock struct{}
}

// MockStructInjectorMockRecorder is the mock recorder for MockStructInjector.
type MockStructInjectorMockRecorder struct {
	mock *MockStructInjector
}

// NewMockStructInjector creates a new mock instance.
func NewMockStructInjector(ctrl *gomock.Controller) *MockStructInjector {
	mock := &MockStructInjector{ctrl: ctrl}
	mock.recorder = &MockStructInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStructInjector) EXPECT() *MockStructInjectorMockRecorder {
	return m.recorder
}

// InjectStruct mocks base method.
func (m *MockStructInjector) InjectStruct(goner any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectStruct", goner)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectStruct indicates an expected call of InjectStruct.
func (mr *MockStructInjectorMockRecorder) InjectStruct(goner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectStruct", reflect.TypeOf((*MockStructInjector)(nil).InjectStruct), goner)
}

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
	isgomock struct{}
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockLoader) Load(goner Goner, options ...Option) error {
	m.ctrl.T.Helper()
	varargs := []any{goner}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Load", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockLoaderMockRecorder) Load(goner any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{goner}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader)(nil).Load), varargs...)
}

// Loaded mocks base method.
func (m *MockLoader) Loaded(arg0 LoaderKey) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loaded", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Loaded indicates an expected call of Loaded.
func (mr *MockLoaderMockRecorder) Loaded(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loaded", reflect.TypeOf((*MockLoader)(nil).Loaded), arg0)
}

// MustLoad mocks base method.
func (m *MockLoader) MustLoad(goner Goner, options ...Option) Loader {
	m.ctrl.T.Helper()
	varargs := []any{goner}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustLoad", varargs...)
	ret0, _ := ret[0].(Loader)
	return ret0
}

// MustLoad indicates an expected call of MustLoad.
func (mr *MockLoaderMockRecorder) MustLoad(goner any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{goner}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustLoad", reflect.TypeOf((*MockLoader)(nil).MustLoad), varargs...)
}

// MustLoadX mocks base method.
func (m *MockLoader) MustLoadX(x any) Loader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustLoadX", x)
	ret0, _ := ret[0].(Loader)
	return ret0
}

// MustLoadX indicates an expected call of MustLoadX.
func (mr *MockLoaderMockRecorder) MustLoadX(x any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustLoadX", reflect.TypeOf((*MockLoader)(nil).MustLoadX), x)
}

// MockGonerKeeper is a mock of GonerKeeper interface.
type MockGonerKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockGonerKeeperMockRecorder
	isgomock struct{}
}

// MockGonerKeeperMockRecorder is the mock recorder for MockGonerKeeper.
type MockGonerKeeperMockRecorder struct {
	mock *MockGonerKeeper
}

// NewMockGonerKeeper creates a new mock instance.
func NewMockGonerKeeper(ctrl *gomock.Controller) *MockGonerKeeper {
	mock := &MockGonerKeeper{ctrl: ctrl}
	mock.recorder = &MockGonerKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGonerKeeper) EXPECT() *MockGonerKeeperMockRecorder {
	return m.recorder
}

// GetGonerByName mocks base method.
func (m *MockGonerKeeper) GetGonerByName(name string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGonerByName", name)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetGonerByName indicates an expected call of GetGonerByName.
func (mr *MockGonerKeeperMockRecorder) GetGonerByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGonerByName", reflect.TypeOf((*MockGonerKeeper)(nil).GetGonerByName), name)
}

// GetGonerByPattern mocks base method.
func (m *MockGonerKeeper) GetGonerByPattern(t reflect.Type, pattern string) []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGonerByPattern", t, pattern)
	ret0, _ := ret[0].([]any)
	return ret0
}

// GetGonerByPattern indicates an expected call of GetGonerByPattern.
func (mr *MockGonerKeeperMockRecorder) GetGonerByPattern(t, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGonerByPattern", reflect.TypeOf((*MockGonerKeeper)(nil).GetGonerByPattern), t, pattern)
}

// GetGonerByType mocks base method.
func (m *MockGonerKeeper) GetGonerByType(t reflect.Type) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGonerByType", t)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetGonerByType indicates an expected call of GetGonerByType.
func (mr *MockGonerKeeperMockRecorder) GetGonerByType(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGonerByType", reflect.TypeOf((*MockGonerKeeper)(nil).GetGonerByType), t)
}
